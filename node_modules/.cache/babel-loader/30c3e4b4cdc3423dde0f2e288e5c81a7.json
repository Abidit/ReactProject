{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\reactAbidit\\\\src\\\\Body\\\\findjobs.js\";\nimport { Component, state, deleteJob, insertApplication } from \"react\";\nimport { Container, Row, Col, Card, Button } from \"react-bootstrap\";\nimport { Link } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport axios from 'axios';\nimport { confirmAlert } from \"react-confirm-alert\"; // Import\n\nimport \"react-confirm-alert/src/react-confirm-alert.css\"; // Import css\n\nimport { TextField } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\"; // For applicants to apply\n//For job owners to delete and update job\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class Findjobs extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: localStorage.getItem('name'),\n      jobs: [],\n      clicked: false,\n      config: {\n        headers: {\n          authorization: `Bearer ${localStorage.getItem('token')}`\n        }\n      }\n    };\n\n    this.insertApplication = (title, owner) => {\n      console.log(title);\n      const userdata = {\n        JobName: title,\n        JobOwner: owner,\n        UserName: localStorage.getItem('name'),\n        Email: localStorage.getItem('email')\n      };\n      axios.get(`http://localhost:3000/application/get/${localStorage.getItem('name')}/${title}`).then(response => {\n        if (response.data.data === null) {\n          axios.post(\"http://localhost:3000/application/insert\", userdata, this.state.config).then(response => {\n            this.props.history.push(\"/findjob\");\n            this.componentDidMount();\n\n            if (response.data.success === true) {\n              swal({\n                title: \"Great Job\",\n                text: \"You have applied Successully.\",\n                icon: \"success\"\n              });\n            } else {\n              swal(\"Error Registering!!\");\n            }\n\n            if (this.state.clicked === true) {\n              swal(\"You have already registered.\");\n            }\n          }).catch(err => {\n            console.log(err);\n          });\n        } else {\n          swal(\"Already Applied\");\n        }\n      });\n    };\n\n    this.deleteJob = job_id => {\n      confirmAlert({\n        title: \"Confirm to Delete\",\n        message: \"Are you sure to delete this?\",\n        buttons: [{\n          label: \"Yes\",\n          onClick: () => {\n            axios.delete(\"http://localhost:3000/job/delete/\" + job_id, this.state.config).then(response => {\n              if (response.data.success === true) {\n                swal({\n                  title: \"Done\",\n                  text: \"The job has been deleted.\"\n                });\n                console.log(response);\n                this.props.history.push(\"/findjob\");\n                this.componentDidMount();\n                return false;\n              }\n            }).catch(err => {\n              console.log(err);\n            });\n          }\n        }, {\n          label: \"No\"\n        }]\n      });\n    };\n  }\n\n  componentDidMount() {\n    axios.get(\"http://localhost:3000/jobs/all\").then(response => {\n      this.setState({\n        jobs: response.data.data\n      });\n    }).catch(err => {\n      console.log(err.response);\n    });\n  }\n\n  render() {\n    const usertype = localStorage.getItem('usertype');\n    const userid = localStorage.getItem('userid');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"headTest\",\n              children: \"Find Jobs\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 31\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 26\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n        freeSolo: true,\n        id: \"free-solo-2-demo\",\n        disableClearable: true,\n        options: this.state.jobs,\n        getOptionLabel: option => option.JobTitle,\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          label: \"Title\",\n          margin: \"normal\",\n          variant: \"outlined\",\n          width: \"500\",\n          InputProps: { ...params.InputProps,\n            type: 'search'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this),\n        renderOption: option => {\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"card\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"card-horizontal\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  class: \"card-body\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                    class: \"card-title\",\n                    children: option.JobTitle\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 146,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    class: \"card-text\",\n                    children: option.SkillsNeeded\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 147,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"card-footer\",\n                children: /*#__PURE__*/_jsxDEV(\"small\", {\n                  class: \"text-muted\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 1\n            }, this)\n          }, void 0, false);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 1\n      }, this), this.state.jobs.map(job => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"jobsGain\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                children: [\"Job Title : \", job.JobTitle]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                className: \"ccd\",\n                children: [\"Description : \", job.Description]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                className: \"ccd\",\n                children: [\"Skills Required : \", job.SkillsNeeded]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                className: \"ccd\",\n                children: [\"Budget and Time : \", job.BudgetTime]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 37\n              }, this), usertype === 'Applicant' ? /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"btnjob\",\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  varient: \"primary\",\n                  onClick: this.insertApplication.bind(this, job.JobTitle, job.JobOwner),\n                  children: \"Apply\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 89\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 67\n              }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: job.Userid === userid ? /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\" \", /*#__PURE__*/_jsxDEV(Button, {\n                    varient: \"danger\",\n                    onClick: this.deleteJob.bind(this, job._id),\n                    children: \"Delete\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 172,\n                    columnNumber: 76\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    children: /*#__PURE__*/_jsxDEV(Link, {\n                      to: \"/update/\" + job._id,\n                      className: \"updatebtn\",\n                      children: \"Update\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 173,\n                      columnNumber: 57\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 173,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 72\n                }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n              }, void 0, false)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 29\n          }, this)\n        }, job._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 33\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Dell/reactAbidit/src/Body/findjobs.js"],"names":["Component","state","deleteJob","insertApplication","Container","Row","Col","Card","Button","Link","swal","axios","confirmAlert","TextField","Autocomplete","Findjobs","name","localStorage","getItem","jobs","clicked","config","headers","authorization","title","owner","console","log","userdata","JobName","JobOwner","UserName","Email","get","then","response","data","post","props","history","push","componentDidMount","success","text","icon","catch","err","job_id","message","buttons","label","onClick","delete","setState","render","usertype","userid","option","JobTitle","params","InputProps","type","SkillsNeeded","map","job","Description","BudgetTime","bind","Userid","_id"],"mappings":"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","sourcesContent":["import { Component, state, deleteJob, insertApplication } from \"react\";\r\nimport { Container, Row, Col, Card, Button } from \"react-bootstrap\";\r\nimport { Link } from 'react-router-dom';\r\nimport swal from 'sweetalert';\r\nimport axios from 'axios';\r\nimport { confirmAlert } from \"react-confirm-alert\"; // Import\r\nimport \"react-confirm-alert/src/react-confirm-alert.css\"; // Import css\r\nimport {TextField } from \"@material-ui/core\";\r\nimport {Autocomplete } from \"@material-ui/lab\";\r\n\r\n// For applicants to apply\r\n//For job owners to delete and update job\r\n\r\nexport default class Findjobs extends Component {\r\n    state = {\r\n        name :localStorage.getItem('name'),\r\n        jobs: [],\r\n        clicked: false,\r\n        config: {\r\n            headers: {\r\n                authorization: `Bearer ${localStorage.getItem('token')}`\r\n            }\r\n        }\r\n    }\r\n    insertApplication = (title, owner) => {\r\n        console.log(title)\r\n\r\n        const userdata = {\r\n            JobName: title,\r\n            JobOwner: owner,\r\n            UserName: localStorage.getItem('name'),\r\n            Email: localStorage.getItem('email')\r\n        }\r\n        axios.get(`http://localhost:3000/application/get/${localStorage.getItem('name')}/${title}`).then((response)=>{\r\n            if(response.data.data===null){\r\n                axios.post(\"http://localhost:3000/application/insert\", userdata, this.state.config)\r\n                .then((response) => {\r\n    \r\n                    this.props.history.push(\"/findjob\")\r\n                    this.componentDidMount()\r\n    \r\n                    if (response.data.success === true) {\r\n                        swal({\r\n                            title: \"Great Job\",\r\n                            text: \"You have applied Successully.\",\r\n                            icon: \"success\",\r\n                        })\r\n                    }\r\n                    else {\r\n                        swal(\"Error Registering!!\")\r\n                    }\r\n                    if (this.state.clicked === true) {\r\n                        swal(\"You have already registered.\")\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err)\r\n                })\r\n            }\r\n            else{\r\n                swal(\"Already Applied\")\r\n            }\r\n        })\r\n       \r\n    }\r\n    deleteJob = (job_id) => {\r\n        confirmAlert({\r\n            title: \"Confirm to Delete\",\r\n            message: \"Are you sure to delete this?\",\r\n            buttons: [\r\n              {\r\n                label: \"Yes\",\r\n                onClick: () => {\r\n                    axios.delete(\"http://localhost:3000/job/delete/\" + job_id, this.state.config)\r\n                    .then((response) => {\r\n                        if (response.data.success === true) {\r\n                            swal({\r\n                                title: \"Done\",\r\n                                text: \"The job has been deleted.\"\r\n                            })\r\n                            console.log(response)\r\n                            this.props.history.push(\"/findjob\")\r\n                            this.componentDidMount()\r\n                            return false;\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        console.log(err)\r\n                    })\r\n                },\r\n              },\r\n              {\r\n                label: \"No\",\r\n              },\r\n            ],\r\n          });\r\n        \r\n    }\r\n    componentDidMount() {\r\n        axios.get(\"http://localhost:3000/jobs/all\")\r\n            .then((response) => {\r\n                this.setState({\r\n                    jobs: response.data.data\r\n                })\r\n            })\r\n            .catch((err) => {\r\n                console.log(err.response)\r\n            })\r\n\r\n    }\r\n    render() {\r\n        const usertype = localStorage.getItem('usertype');\r\n        const userid = localStorage.getItem('userid');\r\n\r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <Row><Col><h2 className=\"headTest\">Find Jobs</h2></Col></Row>\r\n                </Container>\r\n\r\n<Autocomplete\r\n        freeSolo\r\n        id=\"free-solo-2-demo\"\r\n        disableClearable\r\n        options={this.state.jobs}\r\n        getOptionLabel={(option) => option.JobTitle}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            label=\"Title\"\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n            width=\"500\"\r\n            InputProps={{ ...params.InputProps, type: 'search' }}\r\n          />\r\n        )}\r\n \r\n        renderOption={(option) => {\r\n \r\nreturn(\r\n<>\r\n<div class=\"card\" >\r\n                <div class=\"card-horizontal\">\r\n                   \r\n                    <div class=\"card-body\">\r\n                        <h4 class=\"card-title\">{option.JobTitle}</h4>\r\n                        <p class=\"card-text\">{option.SkillsNeeded}</p>\r\n                    </div>\r\n                </div>\r\n                <div class=\"card-footer\">\r\n                    <small class=\"text-muted\"></small>\r\n                </div>\r\n            </div>\r\n</>\r\n)\r\n        }}\r\n \r\n      />\r\n\r\n                {\r\n                    this.state.jobs.map((job) => {\r\n                        return (<div className=\"jobsGain\" key={job._id}>\r\n\r\n                            <Card>\r\n                                <Card.Body>\r\n                                    <Card.Title>Job Title : {job.JobTitle}</Card.Title>\r\n                                    <Card.Text className=\"ccd\">Description : {job.Description}</Card.Text>\r\n                                    <Card.Text className=\"ccd\">Skills Required : {job.SkillsNeeded}</Card.Text>\r\n                                    <Card.Text className=\"ccd\">Budget and Time : {job.BudgetTime}</Card.Text>\r\n                                    {(usertype === 'Applicant') ? <p className=\"btnjob\"><Button varient=\"primary\" onClick={this.insertApplication.bind(this, job.JobTitle, job.JobOwner)}>Apply</Button></p> :\r\n                                        <>\r\n                                            {(job.Userid === userid) ? <p> <Button varient=\"danger\" onClick={this.deleteJob.bind(this, job._id)}>Delete</Button>\r\n                                                <Button><Link to={\"/update/\" + job._id} className='updatebtn'>Update</Link></Button></p> : <></>}</>}\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}